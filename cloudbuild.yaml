options:
  logging: CLOUD_LOGGING_ONLY
  pool: {}

projectId: previewbuild
steps:
  # Build the app
  - name: "node:22"
    entrypoint: npm
    args: ["install"]

  # Build the static files
  - name: "node:22"
    entrypoint: npm
    args: ["run", "build"]

  # Upload to Google Cloud Storage
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: bash
    args:
      - -c
      - |
        # Create a bucket for this PR if it doesn't exist
        gsutil mb -p previewbuild -l us-central1 -b on gs://previewbuild-pr-$_PR_NUMBER || true

        # Make bucket publicly readable
        gsutil iam ch allUsers:objectViewer gs://previewbuild-pr-$_PR_NUMBER

        # Copy the built files to the bucket
        gsutil -m cp -r dist/* gs://previewbuild-pr-$_PR_NUMBER/

        # Set the website configuration
        cat > website.json << EOF
        {
          "mainPageSuffix": "index.html",
          "notFoundPage": "index.html"
        }
        EOF
        gsutil web set -m index.html -e index.html gs://previewbuild-pr-$_PR_NUMBER

        # Get the public URL
        PREVIEW_URL="https://storage.googleapis.com/previewbuild-pr-$_PR_NUMBER/index.html"
        echo "Preview URL: $$PREVIEW_URL"
    id: deploy

  # Post Storage URL to GitHub PR
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: bash
    args:
      - -c
      - |
        # Install jq
        apt-get update -y && apt-get install -y jq

        # Define the preview URL
        PREVIEW_URL="https://storage.googleapis.com/previewbuild-pr-$_PR_NUMBER/index.html"
        echo "Storage URL for PR #$_PR_NUMBER: $$PREVIEW_URL"

        # Check for existing comments on the PR
        if [ -n "$_PR_NUMBER" ]; then
          EXISTING_COMMENTS=$$(curl -s \
            -H "Authorization: Bearer $$GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/rechandler/previewbuild/issues/$_PR_NUMBER/comments)
          
          # Check if any comment contains our deployment message
          if echo "$$EXISTING_COMMENTS" | grep -q "Preview deployment is ready!"; then
            echo "Found existing preview deployment comment"
            # Delete existing preview deployment comment
            COMMENT_ID=$$(echo "$$EXISTING_COMMENTS" | jq -r '.[] | select(.body | contains("Preview deployment is ready!")) | .id')
            curl -X DELETE \
              -H "Authorization: Bearer $$GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/rechandler/previewbuild/issues/comments/$$COMMENT_ID
            echo "Deleted existing preview deployment comment"
          fi
        fi

        # Post comment to GitHub PR with the PR-specific URL
        curl -X POST \
          -H "Authorization: Bearer $$GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/rechandler/previewbuild/issues/$_PR_NUMBER/comments \
          -d "{\"body\":\"ðŸš€ Preview deployment for PR #$_PR_NUMBER (Commit: $SHORT_SHA) is ready!\n\nðŸ”— **Preview URL**: $$PREVIEW_URL\n\n_This preview environment will be automatically deleted when the PR is closed._\"}"
    secretEnv: ["GITHUB_TOKEN"]
    waitFor: ["deploy"] # Wait for deployment to complete

# Secret for GitHub token
availableSecrets:
  secretManager:
    - versionName: projects/previewbuild/secrets/github_token/versions/latest
      env: "GITHUB_TOKEN"
